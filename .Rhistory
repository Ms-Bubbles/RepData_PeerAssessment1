m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()
cacheSolve( m )
m$set( c(0, 2, 2, 0 ))
m$get()
cacheSolve( m )
m$getInverse()
m$getinverse()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof(fit)
summaryRprof(lm)
fit <- lm(y ~ x1 + x2)
Rprof()
summaryRprof()
summaryRprof(fit)
summaryRprof(fit)
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
?qpois
?ls
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
library(XML)
library(xlsx)
fileUrl <- "http://www.w3schools.com/xml/simple/xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
install.packages(c("evaluate", "memoise", "swirl", "yaml"))
library(xlsx)
install.packages("rJava")
library(xlsx)
library(xlsx)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="gas.xlsx")
g_data <- read.xlsx("gas.xlsx", sheetIndex=1, colIndex=7:15, rowIndex=18:23)
g_data <- read.xlsx("gas.xlsx", sheetIndex=1)
Sys.getenv("JAVA_HOME")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
g_data <- read.xlsx("gas.xlsx", sheetIndex=1, colIndex=7:15, rowIndex=18:23)
g_data <- read.xlsx("gas.xlsx", sheetIndex=1)
install.packages("RMySQL", type = "source")
library(RMySQL)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ7hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
library(httr)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "0e4b2fad8f0945a986cdf03c8697d4755c14c57c")
?oauth_app
myapp <- oauth_app("github", key="Ms-Bubbles", secret= NULL)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(github, my app)
github_token <- oauth2.0_token("github", my app)
github_token <- oauth2.0_token(github, myapp)
?oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github <- oauth_endpoints("https://api.github.com/users/jtleek/repos")
github <- oauth_endpoints("https://github.com/")
github <- oauth_endpoints("github")
github_token <- oauth2.0_token(github, myapp)
myapp <- oauth_app("github", key="Ms-Bubbles", secret= "elimbic145")
github <- oauth_endpoints("github")
github_token <- oauth2.0_token(github, myapp)
myapp <- oauth_app("github", key="Ms-Bubbles", secret= "NULL")
github_token <- oauth2.0_token(github, my app)
githubtoken <- oauth2.0_token(github, my app)
githubtoken <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(github, myapp)
gtoken <- config(token = github_token)
library(httr)
?oauth_endpoints
?oauth_app
github <- oauth_endpoints("github")
myapp <- oauth_app("github",key="893ee3afb4009687d9df", secret = NULL)
library(hhtpuv)
install.packages("httpuv")
library(hhtpuv)
library(httpuv)
library(httpuv)
library(httpuv)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
library("jsonlite")
json2 = jsonlite::fromJSON(toJSON(json1))
json2
req
myapp <- oauth_app("github",key="893ee3afb4009687d9df", secret = "0f63c5deed39553ccb13ccac0fbb672f7681e416")
req
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData
jsonData[1, 1:4]
jsonData[2, 1:4]
head(jsonData)
summary(jsonData)
jsonData$created_at
jsonData[1, 1:5]
jsonData[5, created_at]
jsonData[5, ]
jsonData$"name"=="datasharing"
dim(jsonData)
class(jsonData)
jsonData["datasharing", ]
names(jsonData)
jsonData["name": "datasharing","created_at"]
jsonData["datasharing","created_at"]
jsonData[datasharing,created_at]
jsonData[datasharing,"created_at"]
jsonData[name == "datasharing",]
jsonData[== "datasharing",]
jsonData["datasharing",]
jsonData$name == "datasharing"
jsonData$name ='datasharing'
ds <- jsonData$name ='datasharing'
ds <- jsonData$name
ds
ds$created_at
jsonData
head(jsonData)
install.packages("sqldf")
setwd("./UCI HAR Dataset")
##preparing descriptive labels to column names
header <- read.table("./features.txt")
header <- as.factor(header$V2)
testData <- read.table("./test/X_test.txt")
##assigning descriptive labels to column names
colnames(testData) <- header
testLabels <- read.table("./test/y_test.txt")
colnames(testLabels)<- c("Labels")
testSubjects <- read.table("./test/subject_test.txt")
colnames(testSubjects)<- c("SubjectIDs")
test <- cbind(testSubjects, testLabels, testData)
trainData <- read.table("./train/X_train.txt")
##assigning descriptive labels to column names
colnames(trainData) <- header
trainLabels <- read.table("./train/y_train.txt")
colnames(trainLabels)<- c("Labels")
trainSubjects <- read.table("./train/subject_train.txt")
colnames(trainSubjects)<- c("SubjectIDs")
train <- cbind(trainSubjects, trainLabels, trainData)
##merge the two data sets
bindData <- rbind(test, train)
labels <- names(bindData)
sel_mean <- grep("-mean()", labels, fixed = TRUE)
sel_std <- grep("-std()", labels, fixed = TRUE)
means <- bindData[,sel_mean]
stds <- bindData[,sel_std]
cleanData <- cbind(SubjectIDs = bindData$SubjectIDs, Labels = bindData$Labels, means, stds)
##assigning descriptive activity names to variables
cleanData$Labels[cleanData$Labels =="1"] <-"WALKING"
cleanData$Labels[cleanData$Labels =="2"] <-"WALKING_UPSTAIRS"
cleanData$Labels[cleanData$Labels =="3"] <-"WALKING_DOWNSTAIRS"
cleanData$Labels[cleanData$Labels =="4"] <-"SITTING"
cleanData$Labels[cleanData$Labels =="5"] <-"STANDING"
cleanData$Labels[cleanData$Labels =="6"] <-"LAYING"
##Point 5: Creating independent tidy data set with the average of each variable for each activity and each subject
tidyData <- aggregate(cleanData[,3:ncol(cleanData)], list(SubjectIDs=cleanData$SubjectIDs, ActivityLabels=cleanData$Labels), mean)
##Sorting the data based on the subject ids
tidyData <- tidyData[order(tidyData$SubjectIDs, decreasing=FALSE),]
tidyData$SubjectIDs <- as.factor(tidyData$SubjectIDs)
##Creating an output file with the tidy data
write.table(tidyData, file="./TidyData.txt", sep="\t", row.names=FALSE)
setwd("./RWorking Directory/UCI HAR Dataset")
##preparing descriptive labels to column names
header <- read.table("./features.txt")
header <- as.factor(header$V2)
testData <- read.table("./test/X_test.txt")
##assigning descriptive labels to column names
colnames(testData) <- header
testLabels <- read.table("./test/y_test.txt")
colnames(testLabels)<- c("Labels")
testSubjects <- read.table("./test/subject_test.txt")
colnames(testSubjects)<- c("SubjectIDs")
test <- cbind(testSubjects, testLabels, testData)
trainData <- read.table("./train/X_train.txt")
##assigning descriptive labels to column names
colnames(trainData) <- header
trainLabels <- read.table("./train/y_train.txt")
colnames(trainLabels)<- c("Labels")
trainSubjects <- read.table("./train/subject_train.txt")
colnames(trainSubjects)<- c("SubjectIDs")
train <- cbind(trainSubjects, trainLabels, trainData)
##merge the two data sets
bindData <- rbind(test, train)
labels <- names(bindData)
sel_mean <- grep("-mean()", labels, fixed = TRUE)
sel_std <- grep("-std()", labels, fixed = TRUE)
means <- bindData[,sel_mean]
stds <- bindData[,sel_std]
cleanData <- cbind(SubjectIDs = bindData$SubjectIDs, Labels = bindData$Labels, means, stds)
##assigning descriptive activity names to variables
cleanData$Labels[cleanData$Labels =="1"] <-"WALKING"
cleanData$Labels[cleanData$Labels =="2"] <-"WALKING_UPSTAIRS"
cleanData$Labels[cleanData$Labels =="3"] <-"WALKING_DOWNSTAIRS"
cleanData$Labels[cleanData$Labels =="4"] <-"SITTING"
cleanData$Labels[cleanData$Labels =="5"] <-"STANDING"
cleanData$Labels[cleanData$Labels =="6"] <-"LAYING"
##Point 5: Creating independent tidy data set with the average of each variable for each activity and each subject
tidyData <- aggregate(cleanData[,3:ncol(cleanData)], list(SubjectIDs=cleanData$SubjectIDs, ActivityLabels=cleanData$Labels), mean)
##Sorting the data based on the subject ids
tidyData <- tidyData[order(tidyData$SubjectIDs, decreasing=FALSE),]
tidyData$SubjectIDs <- as.factor(tidyData$SubjectIDs)
##Creating an output file with the tidy data
write.table(tidyData, file="./TidyData.txt", sep="\t", row.names=FALSE)
```{r, echo=TRUE}
setwd("D:/RWorking Directory/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
```
View(data)
setwd("D:/RWorking Directory/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
steps_sum <- tapply(data$steps, data$date, sum)
steps_sum <- as.data.frame(steps_sum)
steps_sum$steps_sum <- as.numeric(steps_sum$steps_sum)
View(steps_sum)
```{r, echo=TRUE}
hist(steps_sum$steps_sum, xlab = "Number of steps made per day", main= "Histogram of total steps made per day", cex.main = 1.5, cex.lab=0.8)
```
mean(steps_sum$steps_sum, na.rm=TRUE)
median(steps_sum$steps_sum, na.rm=TRUE)
steps_averaged <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
steps_averaged <- as.data.frame(steps_averaged)
steps_averaged$steps_averaged <- as.numeric(steps_averaged$steps_averaged)
View(steps_averaged)
steps_averaged$interval <- rownames(steps_averaged)
steps_averaged[which.max(steps_averaged$steps_averaged),]
nrow(data[!complete.cases(data),])
nd <- merge(data, steps_averaged, by="interval")
View(nd)
nd[order(nd$date),]
nd <- nd[order(nd$date),]
View(nd)
o_nd <- nd[order(nd$date),]
View(o_nd)
intersect(nd, o_nd)
summary(intersect(nd, o_nd))
length(nd)
View(nd)
length(data)
for(i in 1:length(nd)) {
if(is.na(o_nd$steps)) {
interval <- o_nd$interval[i]
intervalMean <- o_nd[o_nd$interval==interval, 4]
o_nd$steps[i] <- intervalMean
}
}
View(o_nd)
View(nd)
nd$steps[is.na(nd$steps)] <- nd$steps_averaged[is.na(nd$steps)]
View(nd)
steps_sum2 <- tapply(nd$steps, nd$date, sum)
steps_sum2 <- as.data.frame(steps_sum2)
View(steps_sum2)
steps_sum2$steps_sum2 <- as.numeric(steps_sum2$steps_sum2)
hist(steps_sum2$steps_sum2, xlab = "Number of steps made per day", main= "Histogram of total steps made per day (NAs exluded)", cex.main = 1.5, cex.lab=0.8)
hist(steps_sum2$steps_sum2, xlab = "Number of steps made per day", main= "Histogram of total steps made per day (NAs exluded)", cex.main = 1.2, cex.lab=0.8)
install.packages("sm")
library(sm)
sm.density.compare(steps_sum$steps_sum, steps_sum2$steps_sum2, xlab="Number of steps made per day")
title(main="Comparison")
hist(steps_sum2$steps_sum2, xlab = "Number of steps made per day", main= "Histogram of total steps made per day (NAs exluded)", cex.main = 1.2, cex.lab=0.8)
hist(steps_sum$steps_sum, col="red")
?plot
?hist
hist1 <- hist(steps_sum$steps_sum)
hist2 <- hist(steps_sum2$steps_sum2)
plot(hist1, col=rgb(0,0,1,1/4)
plot(hist2, col=rgb(1,0,0,1/4)
plot(hist1, col=rgb(0,0,1,1/4))
plot(hist2, col=rgb(1,0,0,1/4))
plot(hist1, border="blue")
plot(hist2, col=rgb(1,0,0,1/4))
plot(hist1, border="blue")
plot(hist2, col=rgb(1,0,0,1/4))
plot(hist1, col=rgb(1,0,0,1/4)border="blue")
plot(hist2, col=rgb(1,0,0,1/4), xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
plot(hist1, border="blue")
plot(hist2, col=rgb(1,0,0,1/4), xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
plot(hist2, col=rgb(1,0,0,1/4), border="red", xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
plot(hist1, col=rgb(1,0,0,1/4))
plot(hist2, border="red", xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
plot(hist1, col="blue")
plot(hist2, border="red", xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
plot(hist1, col=45)
plot(hist2, border="red", col=420, xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
plot(hist1, col=45)
plot(hist2, border="red", xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
?par
plot(hist1, col=45, 1/4)
plot(hist2, col=420,1/4, border="red", xlab = "Number of steps made per day", main= "Comparison of two histograms with NA vs w/o NAs", cex.main = 1.2, cex.lab=0.8)
steps_sum2$day
steps_sum2 <- steps_sum2$day
steps_sum2 <- tapply(nd$steps, nd$date, sum)
steps_sum2 <- as.data.frame(steps_sum2)
steps_sum2$steps_sum2 <- as.numeric(steps_sum2$steps_sum2)
steps_sum2$date <- rownames(steps_sum2)
View(steps_sum2)
steps_sum2$date <- as.Date(rownames(steps_sum2))
View(steps_sum2)
as.Date
?as.Date
?weekdays
steps_sum2$day <- as.Date(rownames(steps_sum2))
steps_sum2$day <- weekdays(steps_sum2$day, abbreviate=FALSE)
View(steps_sum2)
?if
Sys.setlocale("LC_TIME", "English")
steps_sum2$day <- weekdays(steps_sum2$day, abbreviate=FALSE)
if(steps_sum2$day %in% c("Saturday", "Sunday"))
{steps_sum2$day <- c("Weekend")
else
steps_sum2$day <- c("Weekday") }
steps_sum2$date <- as.Date(rownames(steps_sum2))
steps_sum2$day <- as.Date(rownames(steps_sum2))
Sys.setlocale("LC_TIME", "English")
steps_sum2$day <- weekdays(steps_sum2$day, abbreviate=FALSE)
if(steps_sum2$day %in% c("Saturday", "Sunday"))
{steps_sum2$day <- c("Weekend")
else
steps_sum2$day <- c("Weekday") }
steps_sum2$date <- as.Date(rownames(steps_sum2))
steps_sum2$day <- as.Date(rownames(steps_sum2))
Sys.setlocale("LC_TIME", "English")
steps_sum2$day <- weekdays(steps_sum2$day, abbreviate=FALSE)
if(steps_sum2$day %in% c("Saturday", "Sunday"))
{steps_sum2$day <- c("Weekend")}
else{}
steps_sum2$day <- c("Weekday") }
if(steps_sum2$day %in% c("Saturday", "Sunday"))
{steps_sum2$day <- c("Weekend")}
View(steps_sum2)
if(steps_sum2$day %in% c("Saturday", "Sunday"))
steps_sum2$day <- c("Weekend")
if(steps_sum2$day %in% c("Saturday", "Sunday"))
steps_sum2$day <- "Weekend"
if(steps_sum2$day %in% c("Saturday", "Sunday")) steps_sum2$day <- "Weekend" else "Weekday"
View(steps_sum2)
if(steps_sum2$day == "Saturday") steps_sum2$day <- "Weekend" else "Weekday"
steps_sum2$day <- as.factor(steps_sum2$day)
if(steps_sum2$day %in% c("Saturday", "Sunday")) steps_sum2$day <- "Weekend" else "Weekday"
View(steps_sum2)
steps_sum2$day <- as.character(steps_sum2$day)
if(steps_sum2$day %in% c("Saturday", "Sunday")) steps_sum2$day <- "Weekend" else "Weekday"
View(steps_sum2)
if(steps_sum2$day %in% c("Saturday", "Sunday")) {steps_sum2$day <- "Weekend"} else {"Weekday"}
steps_sum2$day[steps_sum2$day %in% c("Saturday", "Sunday")] <- "Weekend"
View(steps_sum2)
steps_sum2$day[steps_sum2$day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")] <- "Weekday"
View(steps_sum2)
hist(steps_sum$steps_sum, xlab = "Number of steps made per day", main= "Histogram of total steps made per day", cex.main = 1.5, cex.lab=0.8)
View(steps_averaged)
plot(steps_averaged$steps_averaged, type="l")
plot(steps_averaged$steps_averaged, type="l", main="Steps averaged across all days based on intervals", xlab="Intervals", ylab="Steps Averaged")
steps_averaged2 <- tapply(steps_sum2$steps, steps_sum2$day, mean, na.rm=TRUE)
steps_averaged2 <- as.data.frame(steps_averaged2)
steps_averaged2$steps_averaged2 <- as.numeric(steps_averaged2$steps_averaged2)
plot(steps_averaged2$steps_averaged2, type="l", main="Steps averaged across all days based on type of a day", xlab="Intervals", ylab="Steps Averaged")
```{r}
steps_averaged2 <- tapply(steps_sum2$steps_sum2, steps_sum2$day, mean, na.rm=TRUE)
steps_averaged2 <- as.data.frame(steps_averaged2)
steps_averaged2$steps_averaged2 <- as.numeric(steps_averaged2$steps_averaged2)
plot(steps_averaged2$steps_averaged2, type="l", main="Steps averaged across all days based on type of a day", xlab="Intervals", ylab="Steps Averaged")
View(steps_averaged2)
View(steps_averaged)
View(steps_averaged2)
steps_averaged2 <- tapply(steps_sum2$steps_sum2, steps_sum2$day, mean, na.rm=TRUE)
steps_averaged2 <- as.data.frame(steps_averaged2)
steps_averaged2$steps_averaged2 <- as.numeric(steps_averaged2$steps_averaged2)
steps_averaged2$DayType <- rownames(steps_averaged2)
plot(steps_averaged2$steps_averaged2, type="l", main="Steps averaged across all days based on type of a day", xlab="Intervals", ylab="Steps Averaged")
steps_averaged2 <- tapply(steps_sum2$steps_sum2, steps_sum2$day, mean, na.rm=TRUE)
steps_averaged2 <- as.data.frame(steps_averaged2)
steps_averaged2$steps_averaged2 <- as.numeric(steps_averaged2$steps_averaged2)
steps_averaged2$DayType <- rownames(steps_averaged2)
plot(steps_averaged2$steps_averaged2, type="l", main="Steps averaged across all days based on type of a day", xlab="Intervals", ylab="Steps Averaged")
View(steps_averaged2)
plot(steps_averaged2, type="l", main="Steps averaged across all days based on type of a day", xlab="Intervals", ylab="Steps Averaged")
plot(steps_averaged$steps_averaged, type="l", main="Steps averaged across all days based on intervals", xlab="Intervals", ylab="Steps Averaged")
plot(steps_averaged2$steps_averaged2, type="l", main="Steps averaged across all days based on type of a day", xlab="Intervals", ylab="Steps Averaged")
View(nd)
Sys.setlocale("LC_TIME", "English")
nd$day <- weekdays(nd$date, abbreviate=FALSE)
nd$day[nd$day %in% c("Saturday", "Sunday")] <- "weekend"
nd$day[nd$day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")] <- "weekday"
Sys.setlocale("LC_TIME", "English")
nd$date <- as.Date(nd$date)
nd$day <- weekdays(nd$date, abbreviate=FALSE)
nd$day[nd$day %in% c("Saturday", "Sunday")] <- "weekend"
nd$day[nd$day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")] <- "weekday"
```
View(nd)
View(steps_averaged2)
View(steps_sum2)
Sys.setlocale("LC_TIME", "English")
nd$day <- as.Date(nd$date)
nd$day <- weekdays(nd$date, abbreviate=FALSE)
View(nd)
nd$day[nd$day %in% c("Saturday", "Sunday")] <- "weekend"
nd$day[nd$day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")] <- "weekday"
View(nd)
steps_averaged2 <- tapply(nd$steps, nd$interval, mean, na.rm=TRUE)
steps_averaged2 <- as.data.frame(steps_averaged2)
steps_averaged2$steps_averaged2 <- as.numeric(steps_averaged2$steps_averaged2)
steps_averaged2$DayType <- rownames(steps_averaged2)
View(steps_averaged2)
spli <- tapply(nd, nd$day)
?split
snd <- split(nd, nd$day)
View(steps_averaged)
View(nd)
par(mfrow=c(2,1))
steps_averaged2 <- tapply(nd$steps, nd$interval, mean, na.rm=TRUE)
steps_averaged2 <- as.data.frame(steps_averaged2)
steps_averaged2$steps_averaged2 <- as.numeric(steps_averaged2$steps_averaged2)
View(steps_averaged2)
steps_averaged2 <- tapply(nd$steps, nd$day, mean, na.rm=TRUE)
steps_averaged2 <- as.data.frame(steps_averaged2)
steps_averaged2$steps_averaged2 <- as.numeric(steps_averaged2$steps_averaged2)
View(steps_averaged2)
steps_averaged2 <- if (nd$day =="weekday") tapply(nd$steps, nd$interval, mean, na.rm=TRUE)
weekdays <- nd[nd$day=="weekday"]
weekdays <- nd[nd$day=="weekday",]
View(weekdays)
weekends <- nd[nd$day=="weekend",]
View(weekends)
weekdays <- nd[nd$day=="weekday",]
weekends <- nd[nd$day=="weekend",]
wd <- tapply(weekdays$steps, weekdays$interval, mean, na.rm=TRUE)
we <- tapply(weekends$steps, weekends$interval, mean, na.rm=TRUE)
wd <- as.data.frame(tapply(weekdays$steps, weekdays$interval, mean, na.rm=TRUE))
we <- as.data.frame(tapply(weekends$steps, weekends$interval, mean, na.rm=TRUE))
View(wd)
View(weekends)
View(we)
View(wd)
?colNames
colnames(wd) <- c(steps)
colnames(we) <- c(steps)
colnames(wd) <- "steps"
colnames(we) <- "steps"
View(we)
View(wd)
wd$intervals <- rownames(wd)
we$intervals <- rownames(we)
colnames(wd) <- c("intervals", "steps")
colnames(we) <- c("intervals", "steps")
View(we)
colnames(wd) <- c("steps", "intervals")
colnames(we) <- c("steps", "intervals")
par(mfrow=c(2,1), ylab="Number of Steps", xlab="Interval")
plot(we$steps, type="l", main = "Weekends")
plot(wd$steps, type="l", main = "Weekdays")
summary(wd$steps)
summary(we$steps)
par(mfrow=c(2,1))
plot(we$steps, type="l", main = "Weekends", ylim=231)
plot(wd$steps, type="l", main = "Weekdays", ylim=231)
par(mfrow=c(2,1))
plot(we$steps, type="l", main = "Weekends", ylim=231, xlim=2355)
plot(wd$steps, type="l", main = "Weekdays", ylim=231, xlim=2355)
plot(wd$steps, type="l", main = "Weekdays", ylim=231, xlim=2355)
class(wd)
class(steps_averaged)
class(wd$steps)
weekdays <- nd[nd$day=="weekday",]
weekends <- nd[nd$day=="weekend",]
wd <- as.data.frame(tapply(weekdays$steps, weekdays$interval, mean, na.rm=TRUE))
we <- as.data.frame(tapply(weekends$steps, weekends$interval, mean, na.rm=TRUE))
wd$intervals <- rownames(wd)
we$intervals <- rownames(we)
wd$steps <- as.numeric(wd$steps)
we$steps <- as.numeric(we$steps)
colnames(wd) <- c("steps", "intervals")
colnames(we) <- c("steps", "intervals")
par(mfrow=c(2,1))
plot(we$steps, type="l", main = "Weekends", ylim=231, xlim=2355)
plot(wd$steps, type="l", main = "Weekdays", ylim=231, xlim=2355)
par(mfrow=c(2,1))
plot(we$steps, type="l", main = "Weekends", ylim=231, xlim=2355)
plot(wd$steps, type="l", main = "Weekdays", ylim=231, xlim=2355)
plot(wd$steps, type="l", main = "Weekdays", cex.axis=0.5, font.main=1, cex.main=0.8)
plot(wd$steps, type="l", main = "Weekdays", cex.axis=0.5, font.main=1, cex.main=0.8)
par(mfrow=c(2,1))
plot(we$steps, type="l", main = "Weekends", cex.axis=0.5, font.main=1, cex.main=0.8)
plot(wd$steps, type="l", main = "Weekdays", cex.axis=0.5, font.main=1, cex.main=0.8)
par(mfrow=c(2,1))
title("Comparison")
plot(we$steps, type="l", main = "Weekends", cex.axis=0.5, font.main=1, cex.main=0.8, xlab="Intervals", ylab="Number of steps")
plot(wd$steps, type="l", main = "Weekdays", cex.axis=0.5, font.main=1, cex.main=0.8, xlab="Intervals", ylab="Number of steps")
title(main="Comparison")
par()
par(mfrow=c(2,1))
plot(we$steps, type="l", main = "Weekends", cex.axis=0.5, font.main=1, cex.main=0.8, xlab="Intervals", ylab="Number of steps", col="blue")
plot(wd$steps, type="l", main = "Weekdays", cex.axis=0.5, font.main=1, cex.main=0.8, xlab="Intervals", ylab="Number of steps", col="blue")
